{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this._isAuthenticated = false;\n    this.AUTH_KEY = 'authenticated';\n    this.isAuthenticatedChanged = new EventEmitter();\n    this._isAuthenticated = localStorage.getItem(this.AUTH_KEY) === 'true';\n  }\n  //Purpose: Getter for isAuthenticated value\n  get isAuthenticated() {\n    this._isAuthenticated = localStorage.getItem(this.AUTH_KEY) === 'true';\n    return this._isAuthenticated;\n  }\n  //Purpose: Setter for isAuthenticated value\n  set isAuthenticated(value) {\n    if (value) {\n      localStorage.setItem(this.AUTH_KEY, 'true');\n    } else {\n      localStorage.removeItem(this.AUTH_KEY);\n    }\n    this._isAuthenticated = value;\n    this.isAuthenticatedChanged.emit(value);\n  }\n  //Purpose: Set isAuthenticated flag value true\n  login() {\n    this.isAuthenticated = true;\n  }\n  //Purpose: Set isAuthenticated flag value false\n  logout() {\n    this.isAuthenticated = false;\n  }\n  //Purpose: Get isAuthenticated flag from localstorage\n  isAuthenticatedUser() {\n    return localStorage.getItem(this.AUTH_KEY) === 'true';\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["EventEmitter","AuthService","constructor","_isAuthenticated","AUTH_KEY","isAuthenticatedChanged","localStorage","getItem","isAuthenticated","value","setItem","removeItem","emit","login","logout","isAuthenticatedUser","factory","ɵfac","providedIn"],"sources":["E:\\User_Management_System\\myApp\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n   _isAuthenticated = false;\n   private readonly AUTH_KEY = 'authenticated';\n   isAuthenticatedChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor() { \n    this._isAuthenticated = localStorage.getItem(this.AUTH_KEY) === 'true';\n  }\n\n  //Purpose: Getter for isAuthenticated value\n  get isAuthenticated(): boolean {\n    this._isAuthenticated = localStorage.getItem(this.AUTH_KEY) === 'true';\n    return this._isAuthenticated;\n  }\n\n  //Purpose: Setter for isAuthenticated value\n  set isAuthenticated(value: boolean) {\n    if (value) {\n      localStorage.setItem(this.AUTH_KEY, 'true');\n    } else {\n      localStorage.removeItem(this.AUTH_KEY);\n    }\n    this._isAuthenticated = value;\n    this.isAuthenticatedChanged.emit(value);\n  }\n\n  //Purpose: Set isAuthenticated flag value true\n  login(): void {\n    this.isAuthenticated = true;\n  }\n\n  //Purpose: Set isAuthenticated flag value false\n  logout(): void {\n    this.isAuthenticated = false;\n  }\n\n  //Purpose: Get isAuthenticated flag from localstorage\n  isAuthenticatedUser(): boolean {\n    return localStorage.getItem(this.AUTH_KEY) === 'true';\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;;AAMxD,OAAM,MAAOC,WAAW;EAKtBC,YAAA;IAJC,KAAAC,gBAAgB,GAAG,KAAK;IACP,KAAAC,QAAQ,GAAG,eAAe;IAC3C,KAAAC,sBAAsB,GAA0B,IAAIL,YAAY,EAAW;IAG1E,IAAI,CAACG,gBAAgB,GAAGG,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,CAAC,KAAK,MAAM;EACxE;EAEA;EACA,IAAII,eAAeA,CAAA;IACjB,IAAI,CAACL,gBAAgB,GAAGG,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,CAAC,KAAK,MAAM;IACtE,OAAO,IAAI,CAACD,gBAAgB;EAC9B;EAEA;EACA,IAAIK,eAAeA,CAACC,KAAc;IAChC,IAAIA,KAAK,EAAE;MACTH,YAAY,CAACI,OAAO,CAAC,IAAI,CAACN,QAAQ,EAAE,MAAM,CAAC;KAC5C,MAAM;MACLE,YAAY,CAACK,UAAU,CAAC,IAAI,CAACP,QAAQ,CAAC;;IAExC,IAAI,CAACD,gBAAgB,GAAGM,KAAK;IAC7B,IAAI,CAACJ,sBAAsB,CAACO,IAAI,CAACH,KAAK,CAAC;EACzC;EAEA;EACAI,KAAKA,CAAA;IACH,IAAI,CAACL,eAAe,GAAG,IAAI;EAC7B;EAEA;EACAM,MAAMA,CAAA;IACJ,IAAI,CAACN,eAAe,GAAG,KAAK;EAC9B;EAEA;EACAO,mBAAmBA,CAAA;IACjB,OAAOT,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,CAAC,KAAK,MAAM;EACvD;;AAvCWH,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAe,OAAA,EAAXf,WAAW,CAAAgB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}