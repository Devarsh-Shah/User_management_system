{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this._isAuthenticated = false;\n    this.AUTH_KEY = 'authenticated';\n    this.isAuthenticatedChanged = new EventEmitter();\n  }\n  get isAuthenticated() {\n    return this._isAuthenticated;\n  }\n  set isAuthenticated(value) {\n    if (value) {\n      localStorage.setItem(this.AUTH_KEY, 'true');\n    } else {\n      localStorage.removeItem(this.AUTH_KEY);\n    }\n    this._isAuthenticated = value;\n    this.isAuthenticatedChanged.emit(value);\n  }\n  login() {\n    this.isAuthenticated = true;\n  }\n  logout() {\n    this.isAuthenticated = false;\n  }\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["EventEmitter","AuthService","constructor","_isAuthenticated","AUTH_KEY","isAuthenticatedChanged","isAuthenticated","value","localStorage","setItem","removeItem","emit","login","logout","isAuthenticatedUser","factory","ɵfac","providedIn"],"sources":["E:\\User_Management_System\\myApp\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n   _isAuthenticated = false;\n   private readonly AUTH_KEY = 'authenticated';\n   isAuthenticatedChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor() { }\n\n  get isAuthenticated(): boolean {\n    return this._isAuthenticated;\n  }\n\n  set isAuthenticated(value: boolean) {\n    if (value) {\n      localStorage.setItem(this.AUTH_KEY, 'true');\n    } else {\n      localStorage.removeItem(this.AUTH_KEY);\n    }\n    this._isAuthenticated = value;\n    this.isAuthenticatedChanged.emit(value);\n  }\n\n  login(): void {\n    this.isAuthenticated = true;\n  }\n\n  logout(): void {\n    this.isAuthenticated = false;\n  }\n\n  isAuthenticatedUser(): boolean {\n    return this.isAuthenticated;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;;AAMxD,OAAM,MAAOC,WAAW;EAKtBC,YAAA;IAJC,KAAAC,gBAAgB,GAAG,KAAK;IACP,KAAAC,QAAQ,GAAG,eAAe;IAC3C,KAAAC,sBAAsB,GAA0B,IAAIL,YAAY,EAAW;EAE5D;EAEhB,IAAIM,eAAeA,CAAA;IACjB,OAAO,IAAI,CAACH,gBAAgB;EAC9B;EAEA,IAAIG,eAAeA,CAACC,KAAc;IAChC,IAAIA,KAAK,EAAE;MACTC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACL,QAAQ,EAAE,MAAM,CAAC;KAC5C,MAAM;MACLI,YAAY,CAACE,UAAU,CAAC,IAAI,CAACN,QAAQ,CAAC;;IAExC,IAAI,CAACD,gBAAgB,GAAGI,KAAK;IAC7B,IAAI,CAACF,sBAAsB,CAACM,IAAI,CAACJ,KAAK,CAAC;EACzC;EAEAK,KAAKA,CAAA;IACH,IAAI,CAACN,eAAe,GAAG,IAAI;EAC7B;EAEAO,MAAMA,CAAA;IACJ,IAAI,CAACP,eAAe,GAAG,KAAK;EAC9B;EAEAQ,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACR,eAAe;EAC7B;;AA/BWL,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAc,OAAA,EAAXd,WAAW,CAAAe,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}